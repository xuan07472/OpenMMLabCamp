2023/02/08 21:52:53 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.15 (default, Nov 24 2022, 15:19:38) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 1071397159
    GPU 0: NVIDIA GeForce RTX 3070 Laptop GPU
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.6, V11.6.124
    GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
    PyTorch: 1.12.1
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.13.1
    OpenCV: 4.7.0
    MMEngine: 0.3.2

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/02/08 21:52:53 - mmengine - INFO - Config:
model = dict(
    type='MaskRCNN',
    data_preprocessor=dict(
        type='DetDataPreprocessor',
        mean=[103.53, 116.28, 123.675],
        std=[1.0, 1.0, 1.0],
        bgr_to_rgb=False,
        pad_mask=True,
        pad_size_divisor=32),
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=False),
        norm_eval=True,
        style='caffe',
        init_cfg=dict(
            type='Pretrained',
            checkpoint='open-mmlab://detectron2/resnet50_caffe')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=1,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=dict(
            type='FCNMaskHead',
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=1,
            loss_mask=dict(
                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=-1,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.5,
                neg_iou_thr=0.5,
                min_pos_iou=0.5,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=512,
                pos_fraction=0.25,
                neg_pos_ub=-1,
                add_gt_as_proposals=True),
            mask_size=28,
            pos_weight=-1,
            debug=False)),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
dataset_type = 'CocoDataset'
data_root = 'data/balloon/'
file_client_args = dict(backend='disk')
train_pipeline = [
    dict(type='LoadImageFromFile', file_client_args=dict(backend='disk')),
    dict(
        type='LoadAnnotations',
        with_bbox=True,
        with_mask=True,
        poly2mask=False),
    dict(
        type='RandomChoiceResize',
        scales=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),
                (1333, 768), (1333, 800)],
        keep_ratio=True),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackDetInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile', file_client_args=dict(backend='disk')),
    dict(type='Resize', scale=(1333, 800), keep_ratio=True),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(
        type='PackDetInputs',
        meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                   'scale_factor'))
]
train_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    batch_sampler=dict(type='AspectRatioBatchSampler'),
    dataset=dict(
        type='CocoDataset',
        data_root='data/balloon/',
        ann_file='train/annotation_coco.json',
        data_prefix=dict(img='train/'),
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(
                type='LoadImageFromFile',
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadAnnotations',
                with_bbox=True,
                with_mask=True,
                poly2mask=False),
            dict(
                type='RandomChoiceResize',
                scales=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),
                        (1333, 768), (1333, 800)],
                keep_ratio=True),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackDetInputs')
        ],
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])))
val_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='data/balloon/',
        ann_file='val/annotation_coco.json',
        data_prefix=dict(img='val/'),
        test_mode=True,
        pipeline=[
            dict(
                type='LoadImageFromFile',
                file_client_args=dict(backend='disk')),
            dict(type='Resize', scale=(1333, 800), keep_ratio=True),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])))
test_dataloader = dict(
    batch_size=1,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='data/balloon/',
        ann_file='val/annotation_coco.json',
        data_prefix=dict(img='val/'),
        test_mode=True,
        pipeline=[
            dict(
                type='LoadImageFromFile',
                file_client_args=dict(backend='disk')),
            dict(type='Resize', scale=(1333, 800), keep_ratio=True),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])))
val_evaluator = dict(
    type='CocoMetric',
    ann_file='data/balloon/val/annotation_coco.json',
    metric=['bbox', 'segm'],
    format_only=False)
test_evaluator = dict(
    type='CocoMetric',
    ann_file='data/balloon/val/annotation_coco.json',
    metric=['bbox', 'segm'],
    format_only=False)
train_cfg = dict(type='EpochBasedTrainLoop', max_epochs=12, val_interval=1)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(
        type='LinearLR', start_factor=0.001, by_epoch=False, begin=0, end=500),
    dict(
        type='MultiStepLR',
        begin=0,
        end=12,
        by_epoch=True,
        milestones=[8, 11],
        gamma=0.1)
]
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.0015, momentum=0.9, weight_decay=0.0001))
auto_scale_lr = dict(enable=False, base_batch_size=16)
default_scope = 'mmdet'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', interval=1),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='DetVisualizationHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='DetLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(type='LogProcessor', window_size=50, by_epoch=True)
log_level = 'INFO'
load_from = '/home/ubuntu/mmdetection/checkpoints/mask_rcnn_r50_caffe_fpn_mstrain-poly_3x_coco_bbox_mAP-0.408__segm_mAP-0.37_20200504_163245-42aa3d00.pth'
resume = False
metainfo = dict(classes=('balloon', ), palette=[(220, 20, 60)])
launcher = 'none'
work_dir = './work_dirs/mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon'

2023/02/08 21:52:53 - mmengine - INFO - Result has been saved to /home/ubuntu/mmdetection/work_dirs/mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon/modules_statistic_results.json
2023/02/08 21:52:54 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/02/08 21:52:54 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/02/08 21:52:55 - mmengine - INFO - load model from: open-mmlab://detectron2/resnet50_caffe
2023/02/08 21:52:55 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://detectron2/resnet50_caffe
2023/02/08 21:52:55 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: conv1.bias

Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron2/resnet50_caffe 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.weight - torch.Size([2, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_cls.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.mask_head.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

roi_head.mask_head.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of MaskRCNN  

roi_head.mask_head.upsample.weight - torch.Size([256, 256, 2, 2]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.upsample.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in FCNMaskHead  

roi_head.mask_head.conv_logits.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in FCNMaskHead  
2023/02/08 21:52:55 - mmengine - INFO - Load checkpoint from /home/ubuntu/mmdetection/checkpoints/mask_rcnn_r50_caffe_fpn_mstrain-poly_3x_coco_bbox_mAP-0.408__segm_mAP-0.37_20200504_163245-42aa3d00.pth
2023/02/08 21:52:55 - mmengine - INFO - Checkpoints will be saved to /home/ubuntu/mmdetection/work_dirs/mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon.
2023/02/08 21:53:05 - mmengine - INFO - Epoch(train)  [1][50/61]  lr: 1.4865e-04  eta: 0:02:20  time: 0.2054  data_time: 0.0045  memory: 1858  loss: 1.5501  loss_rpn_cls: 0.0525  loss_rpn_bbox: 0.0111  loss_cls: 0.4402  acc: 95.5078  loss_bbox: 0.3231  loss_mask: 0.7232
2023/02/08 21:53:07 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230208_215253
2023/02/08 21:53:07 - mmengine - INFO - Saving checkpoint at 1 epochs
2023/02/08 21:53:17 - mmengine - INFO - Evaluating bbox...
2023/02/08 21:53:17 - mmengine - INFO - bbox_mAP_copypaste: 0.389 0.484 0.444 0.002 0.321 0.439
2023/02/08 21:53:17 - mmengine - INFO - Evaluating segm...
2023/02/08 21:53:17 - mmengine - INFO - segm_mAP_copypaste: 0.424 0.489 0.470 0.005 0.183 0.641
2023/02/08 21:53:17 - mmengine - INFO - Epoch(val) [1][13/13]  coco/bbox_mAP: 0.3890  coco/bbox_mAP_50: 0.4840  coco/bbox_mAP_75: 0.4440  coco/bbox_mAP_s: 0.0020  coco/bbox_mAP_m: 0.3210  coco/bbox_mAP_l: 0.4390  coco/segm_mAP: 0.4240  coco/segm_mAP_50: 0.4890  coco/segm_mAP_75: 0.4700  coco/segm_mAP_s: 0.0050  coco/segm_mAP_m: 0.1830  coco/segm_mAP_l: 0.6410
2023/02/08 21:53:27 - mmengine - INFO - Epoch(train)  [2][50/61]  lr: 3.3183e-04  eta: 0:02:03  time: 0.1984  data_time: 0.0034  memory: 2947  loss: 0.6540  loss_rpn_cls: 0.0191  loss_rpn_bbox: 0.0099  loss_cls: 0.1707  acc: 99.2188  loss_bbox: 0.3626  loss_mask: 0.0916
2023/02/08 21:53:29 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230208_215253
2023/02/08 21:53:29 - mmengine - INFO - Saving checkpoint at 2 epochs
2023/02/08 21:53:35 - mmengine - INFO - Evaluating bbox...
2023/02/08 21:53:35 - mmengine - INFO - bbox_mAP_copypaste: 0.685 0.865 0.836 0.022 0.620 0.741
2023/02/08 21:53:35 - mmengine - INFO - Evaluating segm...
2023/02/08 21:53:35 - mmengine - INFO - segm_mAP_copypaste: 0.779 0.847 0.843 0.016 0.678 0.848
2023/02/08 21:53:35 - mmengine - INFO - Epoch(val) [2][13/13]  coco/bbox_mAP: 0.6850  coco/bbox_mAP_50: 0.8650  coco/bbox_mAP_75: 0.8360  coco/bbox_mAP_s: 0.0220  coco/bbox_mAP_m: 0.6200  coco/bbox_mAP_l: 0.7410  coco/segm_mAP: 0.7790  coco/segm_mAP_50: 0.8470  coco/segm_mAP_75: 0.8430  coco/segm_mAP_s: 0.0160  coco/segm_mAP_m: 0.6780  coco/segm_mAP_l: 0.8480
2023/02/08 21:53:44 - mmengine - INFO - Epoch(train)  [3][50/61]  lr: 5.1501e-04  eta: 0:01:48  time: 0.1770  data_time: 0.0032  memory: 3180  loss: 0.3780  loss_rpn_cls: 0.0141  loss_rpn_bbox: 0.0100  loss_cls: 0.0888  acc: 98.2422  loss_bbox: 0.1778  loss_mask: 0.0873
2023/02/08 21:53:46 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230208_215253
2023/02/08 21:53:46 - mmengine - INFO - Saving checkpoint at 3 epochs
2023/02/08 21:53:49 - mmengine - INFO - Evaluating bbox...
2023/02/08 21:53:49 - mmengine - INFO - bbox_mAP_copypaste: 0.738 0.887 0.868 0.025 0.668 0.796
2023/02/08 21:53:49 - mmengine - INFO - Evaluating segm...
2023/02/08 21:53:49 - mmengine - INFO - segm_mAP_copypaste: 0.801 0.874 0.865 0.015 0.702 0.870
2023/02/08 21:53:49 - mmengine - INFO - Epoch(val) [3][13/13]  coco/bbox_mAP: 0.7380  coco/bbox_mAP_50: 0.8870  coco/bbox_mAP_75: 0.8680  coco/bbox_mAP_s: 0.0250  coco/bbox_mAP_m: 0.6680  coco/bbox_mAP_l: 0.7960  coco/segm_mAP: 0.8010  coco/segm_mAP_50: 0.8740  coco/segm_mAP_75: 0.8650  coco/segm_mAP_s: 0.0150  coco/segm_mAP_m: 0.7020  coco/segm_mAP_l: 0.8700
2023/02/08 21:53:58 - mmengine - INFO - Epoch(train)  [4][50/61]  lr: 6.9820e-04  eta: 0:01:34  time: 0.1774  data_time: 0.0037  memory: 2312  loss: 0.2983  loss_rpn_cls: 0.0094  loss_rpn_bbox: 0.0129  loss_cls: 0.0791  acc: 98.0469  loss_bbox: 0.1213  loss_mask: 0.0755
2023/02/08 21:54:00 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230208_215253
2023/02/08 21:54:00 - mmengine - INFO - Saving checkpoint at 4 epochs
2023/02/08 21:54:02 - mmengine - INFO - Evaluating bbox...
2023/02/08 21:54:02 - mmengine - INFO - bbox_mAP_copypaste: 0.756 0.886 0.859 0.167 0.651 0.819
2023/02/08 21:54:02 - mmengine - INFO - Evaluating segm...
2023/02/08 21:54:02 - mmengine - INFO - segm_mAP_copypaste: 0.784 0.867 0.860 0.094 0.660 0.847
2023/02/08 21:54:02 - mmengine - INFO - Epoch(val) [4][13/13]  coco/bbox_mAP: 0.7560  coco/bbox_mAP_50: 0.8860  coco/bbox_mAP_75: 0.8590  coco/bbox_mAP_s: 0.1670  coco/bbox_mAP_m: 0.6510  coco/bbox_mAP_l: 0.8190  coco/segm_mAP: 0.7840  coco/segm_mAP_50: 0.8670  coco/segm_mAP_75: 0.8600  coco/segm_mAP_s: 0.0940  coco/segm_mAP_m: 0.6600  coco/segm_mAP_l: 0.8470
2023/02/08 21:54:11 - mmengine - INFO - Epoch(train)  [5][50/61]  lr: 8.8138e-04  eta: 0:01:20  time: 0.1730  data_time: 0.0039  memory: 2029  loss: 0.2295  loss_rpn_cls: 0.0048  loss_rpn_bbox: 0.0109  loss_cls: 0.0547  acc: 99.4141  loss_bbox: 0.0948  loss_mask: 0.0643
2023/02/08 21:54:13 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230208_215253
2023/02/08 21:54:13 - mmengine - INFO - Saving checkpoint at 5 epochs
2023/02/08 21:54:16 - mmengine - INFO - Evaluating bbox...
2023/02/08 21:54:16 - mmengine - INFO - bbox_mAP_copypaste: 0.751 0.905 0.858 0.101 0.635 0.825
2023/02/08 21:54:16 - mmengine - INFO - Evaluating segm...
2023/02/08 21:54:16 - mmengine - INFO - segm_mAP_copypaste: 0.799 0.888 0.879 0.101 0.695 0.869
2023/02/08 21:54:16 - mmengine - INFO - Epoch(val) [5][13/13]  coco/bbox_mAP: 0.7510  coco/bbox_mAP_50: 0.9050  coco/bbox_mAP_75: 0.8580  coco/bbox_mAP_s: 0.1010  coco/bbox_mAP_m: 0.6350  coco/bbox_mAP_l: 0.8250  coco/segm_mAP: 0.7990  coco/segm_mAP_50: 0.8880  coco/segm_mAP_75: 0.8790  coco/segm_mAP_s: 0.1010  coco/segm_mAP_m: 0.6950  coco/segm_mAP_l: 0.8690
2023/02/08 21:54:25 - mmengine - INFO - Epoch(train)  [6][50/61]  lr: 1.0646e-03  eta: 0:01:09  time: 0.1800  data_time: 0.0042  memory: 2029  loss: 0.2311  loss_rpn_cls: 0.0056  loss_rpn_bbox: 0.0128  loss_cls: 0.0546  acc: 94.9219  loss_bbox: 0.0869  loss_mask: 0.0712
2023/02/08 21:54:27 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230208_215253
2023/02/08 21:54:27 - mmengine - INFO - Saving checkpoint at 6 epochs
2023/02/08 21:54:30 - mmengine - INFO - Evaluating bbox...
2023/02/08 21:54:30 - mmengine - INFO - bbox_mAP_copypaste: 0.766 0.903 0.875 0.101 0.670 0.828
2023/02/08 21:54:30 - mmengine - INFO - Evaluating segm...
2023/02/08 21:54:30 - mmengine - INFO - segm_mAP_copypaste: 0.801 0.893 0.874 0.067 0.695 0.874
2023/02/08 21:54:30 - mmengine - INFO - Epoch(val) [6][13/13]  coco/bbox_mAP: 0.7660  coco/bbox_mAP_50: 0.9030  coco/bbox_mAP_75: 0.8750  coco/bbox_mAP_s: 0.1010  coco/bbox_mAP_m: 0.6700  coco/bbox_mAP_l: 0.8280  coco/segm_mAP: 0.8010  coco/segm_mAP_50: 0.8930  coco/segm_mAP_75: 0.8740  coco/segm_mAP_s: 0.0670  coco/segm_mAP_m: 0.6950  coco/segm_mAP_l: 0.8740
2023/02/08 21:54:39 - mmengine - INFO - Epoch(train)  [7][50/61]  lr: 1.2477e-03  eta: 0:00:57  time: 0.1690  data_time: 0.0041  memory: 2025  loss: 0.2008  loss_rpn_cls: 0.0048  loss_rpn_bbox: 0.0113  loss_cls: 0.0489  acc: 98.6328  loss_bbox: 0.0780  loss_mask: 0.0578
2023/02/08 21:54:41 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230208_215253
2023/02/08 21:54:41 - mmengine - INFO - Saving checkpoint at 7 epochs
2023/02/08 21:54:44 - mmengine - INFO - Evaluating bbox...
2023/02/08 21:54:44 - mmengine - INFO - bbox_mAP_copypaste: 0.772 0.894 0.867 0.101 0.675 0.829
2023/02/08 21:54:44 - mmengine - INFO - Evaluating segm...
2023/02/08 21:54:44 - mmengine - INFO - segm_mAP_copypaste: 0.807 0.894 0.862 0.025 0.679 0.878
2023/02/08 21:54:44 - mmengine - INFO - Epoch(val) [7][13/13]  coco/bbox_mAP: 0.7720  coco/bbox_mAP_50: 0.8940  coco/bbox_mAP_75: 0.8670  coco/bbox_mAP_s: 0.1010  coco/bbox_mAP_m: 0.6750  coco/bbox_mAP_l: 0.8290  coco/segm_mAP: 0.8070  coco/segm_mAP_50: 0.8940  coco/segm_mAP_75: 0.8620  coco/segm_mAP_s: 0.0250  coco/segm_mAP_m: 0.6790  coco/segm_mAP_l: 0.8780
2023/02/08 21:54:52 - mmengine - INFO - Epoch(train)  [8][50/61]  lr: 1.4309e-03  eta: 0:00:46  time: 0.1739  data_time: 0.0040  memory: 2029  loss: 0.1905  loss_rpn_cls: 0.0041  loss_rpn_bbox: 0.0099  loss_cls: 0.0477  acc: 99.6094  loss_bbox: 0.0726  loss_mask: 0.0563
2023/02/08 21:54:54 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230208_215253
2023/02/08 21:54:54 - mmengine - INFO - Saving checkpoint at 8 epochs
2023/02/08 21:54:57 - mmengine - INFO - Evaluating bbox...
2023/02/08 21:54:57 - mmengine - INFO - bbox_mAP_copypaste: 0.753 0.896 0.842 0.126 0.623 0.825
2023/02/08 21:54:57 - mmengine - INFO - Evaluating segm...
2023/02/08 21:54:57 - mmengine - INFO - segm_mAP_copypaste: 0.799 0.896 0.879 0.202 0.664 0.865
2023/02/08 21:54:57 - mmengine - INFO - Epoch(val) [8][13/13]  coco/bbox_mAP: 0.7530  coco/bbox_mAP_50: 0.8960  coco/bbox_mAP_75: 0.8420  coco/bbox_mAP_s: 0.1260  coco/bbox_mAP_m: 0.6230  coco/bbox_mAP_l: 0.8250  coco/segm_mAP: 0.7990  coco/segm_mAP_50: 0.8960  coco/segm_mAP_75: 0.8790  coco/segm_mAP_s: 0.2020  coco/segm_mAP_m: 0.6640  coco/segm_mAP_l: 0.8650
2023/02/08 21:55:06 - mmengine - INFO - Epoch(train)  [9][50/61]  lr: 1.5000e-04  eta: 0:00:35  time: 0.1773  data_time: 0.0042  memory: 1970  loss: 0.1852  loss_rpn_cls: 0.0021  loss_rpn_bbox: 0.0091  loss_cls: 0.0447  acc: 97.6562  loss_bbox: 0.0690  loss_mask: 0.0602
2023/02/08 21:55:08 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230208_215253
2023/02/08 21:55:08 - mmengine - INFO - Saving checkpoint at 9 epochs
2023/02/08 21:55:11 - mmengine - INFO - Evaluating bbox...
2023/02/08 21:55:11 - mmengine - INFO - bbox_mAP_copypaste: 0.780 0.895 0.874 0.151 0.634 0.849
2023/02/08 21:55:11 - mmengine - INFO - Evaluating segm...
2023/02/08 21:55:11 - mmengine - INFO - segm_mAP_copypaste: 0.816 0.895 0.873 0.202 0.672 0.879
2023/02/08 21:55:11 - mmengine - INFO - Epoch(val) [9][13/13]  coco/bbox_mAP: 0.7800  coco/bbox_mAP_50: 0.8950  coco/bbox_mAP_75: 0.8740  coco/bbox_mAP_s: 0.1510  coco/bbox_mAP_m: 0.6340  coco/bbox_mAP_l: 0.8490  coco/segm_mAP: 0.8160  coco/segm_mAP_50: 0.8950  coco/segm_mAP_75: 0.8730  coco/segm_mAP_s: 0.2020  coco/segm_mAP_m: 0.6720  coco/segm_mAP_l: 0.8790
2023/02/08 21:55:19 - mmengine - INFO - Epoch(train) [10][50/61]  lr: 1.5000e-04  eta: 0:00:23  time: 0.1692  data_time: 0.0034  memory: 2029  loss: 0.1672  loss_rpn_cls: 0.0023  loss_rpn_bbox: 0.0078  loss_cls: 0.0417  acc: 99.8047  loss_bbox: 0.0587  loss_mask: 0.0567
2023/02/08 21:55:21 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230208_215253
2023/02/08 21:55:21 - mmengine - INFO - Saving checkpoint at 10 epochs
2023/02/08 21:55:24 - mmengine - INFO - Evaluating bbox...
2023/02/08 21:55:24 - mmengine - INFO - bbox_mAP_copypaste: 0.768 0.891 0.854 0.126 0.634 0.834
2023/02/08 21:55:24 - mmengine - INFO - Evaluating segm...
2023/02/08 21:55:24 - mmengine - INFO - segm_mAP_copypaste: 0.806 0.891 0.868 0.177 0.656 0.873
2023/02/08 21:55:24 - mmengine - INFO - Epoch(val) [10][13/13]  coco/bbox_mAP: 0.7680  coco/bbox_mAP_50: 0.8910  coco/bbox_mAP_75: 0.8540  coco/bbox_mAP_s: 0.1260  coco/bbox_mAP_m: 0.6340  coco/bbox_mAP_l: 0.8340  coco/segm_mAP: 0.8060  coco/segm_mAP_50: 0.8910  coco/segm_mAP_75: 0.8680  coco/segm_mAP_s: 0.1770  coco/segm_mAP_m: 0.6560  coco/segm_mAP_l: 0.8730
2023/02/08 21:55:33 - mmengine - INFO - Epoch(train) [11][50/61]  lr: 1.5000e-04  eta: 0:00:12  time: 0.1742  data_time: 0.0035  memory: 2029  loss: 0.1532  loss_rpn_cls: 0.0026  loss_rpn_bbox: 0.0063  loss_cls: 0.0361  acc: 97.4609  loss_bbox: 0.0550  loss_mask: 0.0532
2023/02/08 21:55:35 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230208_215253
2023/02/08 21:55:35 - mmengine - INFO - Saving checkpoint at 11 epochs
2023/02/08 21:55:37 - mmengine - INFO - Evaluating bbox...
2023/02/08 21:55:37 - mmengine - INFO - bbox_mAP_copypaste: 0.769 0.892 0.871 0.303 0.622 0.835
2023/02/08 21:55:37 - mmengine - INFO - Evaluating segm...
2023/02/08 21:55:37 - mmengine - INFO - segm_mAP_copypaste: 0.811 0.892 0.869 0.404 0.658 0.874
2023/02/08 21:55:37 - mmengine - INFO - Epoch(val) [11][13/13]  coco/bbox_mAP: 0.7690  coco/bbox_mAP_50: 0.8920  coco/bbox_mAP_75: 0.8710  coco/bbox_mAP_s: 0.3030  coco/bbox_mAP_m: 0.6220  coco/bbox_mAP_l: 0.8350  coco/segm_mAP: 0.8110  coco/segm_mAP_50: 0.8920  coco/segm_mAP_75: 0.8690  coco/segm_mAP_s: 0.4040  coco/segm_mAP_m: 0.6580  coco/segm_mAP_l: 0.8740
2023/02/08 21:55:46 - mmengine - INFO - Epoch(train) [12][50/61]  lr: 1.5000e-05  eta: 0:00:01  time: 0.1682  data_time: 0.0031  memory: 1955  loss: 0.1559  loss_rpn_cls: 0.0026  loss_rpn_bbox: 0.0076  loss_cls: 0.0362  acc: 99.6094  loss_bbox: 0.0565  loss_mask: 0.0530
2023/02/08 21:55:48 - mmengine - INFO - Exp name: mask-rcnn_r50-caffe_fpn_ms-poly-1x_balloon_20230208_215253
2023/02/08 21:55:48 - mmengine - INFO - Saving checkpoint at 12 epochs
2023/02/08 21:55:51 - mmengine - INFO - Evaluating bbox...
2023/02/08 21:55:51 - mmengine - INFO - bbox_mAP_copypaste: 0.774 0.892 0.871 0.303 0.625 0.841
2023/02/08 21:55:51 - mmengine - INFO - Evaluating segm...
2023/02/08 21:55:51 - mmengine - INFO - segm_mAP_copypaste: 0.805 0.892 0.869 0.353 0.651 0.874
2023/02/08 21:55:51 - mmengine - INFO - Epoch(val) [12][13/13]  coco/bbox_mAP: 0.7740  coco/bbox_mAP_50: 0.8920  coco/bbox_mAP_75: 0.8710  coco/bbox_mAP_s: 0.3030  coco/bbox_mAP_m: 0.6250  coco/bbox_mAP_l: 0.8410  coco/segm_mAP: 0.8050  coco/segm_mAP_50: 0.8920  coco/segm_mAP_75: 0.8690  coco/segm_mAP_s: 0.3530  coco/segm_mAP_m: 0.6510  coco/segm_mAP_l: 0.8740
